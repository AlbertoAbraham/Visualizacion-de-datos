{"metadata":{"orig_nbformat":4,"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Páginas para programar python","metadata":{}},{"cell_type":"markdown","source":"1. www.mybinder.org\n2. www.kaggle.com\n3. www.jupyter.org/try\n4. `github jobish` https://mybinder.org/v2/gh/jobish03/jobish03-Visualizacion_de_datos_para_la_toma_de_decisiones/main?filepath=welcome_binder.ipynb\n\nLos paquetes hay que incluir en el archivo `requirements.txt`","metadata":{}},{"cell_type":"code","source":"pip install seaborn","metadata":{"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Requirement already satisfied: seaborn in /srv/conda/envs/notebook/lib/python3.7/site-packages (0.11.2)\nRequirement already satisfied: scipy>=1.0 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from seaborn) (1.4.1)\nRequirement already satisfied: matplotlib>=2.2 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from seaborn) (3.2.1)\nRequirement already satisfied: pandas>=0.23 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from seaborn) (1.0.4)\nRequirement already satisfied: numpy>=1.15 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from seaborn) (1.18.5)\nRequirement already satisfied: kiwisolver>=1.0.1 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn) (1.2.0)\nRequirement already satisfied: cycler>=0.10 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn) (0.10.0)\nRequirement already satisfied: python-dateutil>=2.1 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn) (2.8.1)\nRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn) (2.4.7)\nRequirement already satisfied: six in /srv/conda/envs/notebook/lib/python3.7/site-packages (from cycler>=0.10->matplotlib>=2.2->seaborn) (1.16.0)\nRequirement already satisfied: pytz>=2017.2 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from pandas>=0.23->seaborn) (2020.1)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"pip install plotly","metadata":{"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Requirement already satisfied: plotly in /srv/conda/envs/notebook/lib/python3.7/site-packages (5.4.0)\nRequirement already satisfied: six in /srv/conda/envs/notebook/lib/python3.7/site-packages (from plotly) (1.16.0)\nRequirement already satisfied: tenacity>=6.2.0 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from plotly) (8.0.1)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"pip install openpyxl","metadata":{"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Requirement already satisfied: openpyxl in /srv/conda/envs/notebook/lib/python3.7/site-packages (3.0.9)\nRequirement already satisfied: et-xmlfile in /srv/conda/envs/notebook/lib/python3.7/site-packages (from openpyxl) (1.1.0)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport plotly.express as px","metadata":{"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"df = pd.read_excel('mic.xlsx',\n                   engine = 'openpyxl'\n                  )\ndf.head()","metadata":{"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"                Timestamp                           Name      Age     Sex  \\\n0 2021-09-24 11:41:37.540  Jobish Vallikavungal Devassia  31 - 40    Male   \n1 2021-09-24 11:44:42.933                         chikku  21 - 30    Male   \n2 2021-09-24 11:49:07.510          Dr Lillykutty Abraham  41 - 50  Female   \n3 2021-09-24 21:49:47.576                         Joshua  21 - 30    Male   \n4 2021-09-24 21:53:14.805                        Aswathi  21 - 30  Female   \n\n   Ocupation  Monthly income   Price  Quality  Quantity  Availability  ...  \\\n0  Research          >40, 000      5        5         5             4  ...   \n1    student          <10,000      3        5         3             4  ...   \n2   Teaching         >40, 000      3        4         4             4  ...   \n3    Student          <10,000      5        5         3             4  ...   \n4      Tutor  10,000 - 20,000      5        5         4             4  ...   \n\n   Overal satisfaction  Consistency   Factor  Frowned          reason  \\\n0                    4            4    Taste       No             NaN   \n1                    4            4    Taste       No  Quanity issues   \n2                    4            4    Taste       No             NaN   \n3                    4            4    Taste       No             NaN   \n4                    5            5  Quality       No             NaN   \n\n                             Popular   My favorite                     Kind  \\\n0            vanilla, lemon, and mint    Chocolate  More than one flavoured   \n1  vanilla, chocolate, and strawberry    Chocolate  More than one flavoured   \n2  vanilla, chocolate, and strawberry      Caramel  More than one flavoured   \n3  vanilla, chocolate, and strawberry    Strawbery  More than one flavoured   \n4  vanilla, chocolate, and strawberry       Vanila         single flavoured   \n\n  Preference       Recommend  \n0      agree           agree  \n1    neutral         neutral  \n2   disagree         neutral  \n3      agree           agree  \n4      agree  Strongly agree  \n\n[5 rows x 26 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Timestamp</th>\n      <th>Name</th>\n      <th>Age</th>\n      <th>Sex</th>\n      <th>Ocupation</th>\n      <th>Monthly income</th>\n      <th>Price</th>\n      <th>Quality</th>\n      <th>Quantity</th>\n      <th>Availability</th>\n      <th>...</th>\n      <th>Overal satisfaction</th>\n      <th>Consistency</th>\n      <th>Factor</th>\n      <th>Frowned</th>\n      <th>reason</th>\n      <th>Popular</th>\n      <th>My favorite</th>\n      <th>Kind</th>\n      <th>Preference</th>\n      <th>Recommend</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2021-09-24 11:41:37.540</td>\n      <td>Jobish Vallikavungal Devassia</td>\n      <td>31 - 40</td>\n      <td>Male</td>\n      <td>Research</td>\n      <td>&gt;40, 000</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>4</td>\n      <td>...</td>\n      <td>4</td>\n      <td>4</td>\n      <td>Taste</td>\n      <td>No</td>\n      <td>NaN</td>\n      <td>vanilla, lemon, and mint</td>\n      <td>Chocolate</td>\n      <td>More than one flavoured</td>\n      <td>agree</td>\n      <td>agree</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2021-09-24 11:44:42.933</td>\n      <td>chikku</td>\n      <td>21 - 30</td>\n      <td>Male</td>\n      <td>student</td>\n      <td>&lt;10,000</td>\n      <td>3</td>\n      <td>5</td>\n      <td>3</td>\n      <td>4</td>\n      <td>...</td>\n      <td>4</td>\n      <td>4</td>\n      <td>Taste</td>\n      <td>No</td>\n      <td>Quanity issues</td>\n      <td>vanilla, chocolate, and strawberry</td>\n      <td>Chocolate</td>\n      <td>More than one flavoured</td>\n      <td>neutral</td>\n      <td>neutral</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2021-09-24 11:49:07.510</td>\n      <td>Dr Lillykutty Abraham</td>\n      <td>41 - 50</td>\n      <td>Female</td>\n      <td>Teaching</td>\n      <td>&gt;40, 000</td>\n      <td>3</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>...</td>\n      <td>4</td>\n      <td>4</td>\n      <td>Taste</td>\n      <td>No</td>\n      <td>NaN</td>\n      <td>vanilla, chocolate, and strawberry</td>\n      <td>Caramel</td>\n      <td>More than one flavoured</td>\n      <td>disagree</td>\n      <td>neutral</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2021-09-24 21:49:47.576</td>\n      <td>Joshua</td>\n      <td>21 - 30</td>\n      <td>Male</td>\n      <td>Student</td>\n      <td>&lt;10,000</td>\n      <td>5</td>\n      <td>5</td>\n      <td>3</td>\n      <td>4</td>\n      <td>...</td>\n      <td>4</td>\n      <td>4</td>\n      <td>Taste</td>\n      <td>No</td>\n      <td>NaN</td>\n      <td>vanilla, chocolate, and strawberry</td>\n      <td>Strawbery</td>\n      <td>More than one flavoured</td>\n      <td>agree</td>\n      <td>agree</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2021-09-24 21:53:14.805</td>\n      <td>Aswathi</td>\n      <td>21 - 30</td>\n      <td>Female</td>\n      <td>Tutor</td>\n      <td>10,000 - 20,000</td>\n      <td>5</td>\n      <td>5</td>\n      <td>4</td>\n      <td>4</td>\n      <td>...</td>\n      <td>5</td>\n      <td>5</td>\n      <td>Quality</td>\n      <td>No</td>\n      <td>NaN</td>\n      <td>vanilla, chocolate, and strawberry</td>\n      <td>Vanila</td>\n      <td>single flavoured</td>\n      <td>agree</td>\n      <td>Strongly agree</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 26 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"counts = df['Age'].value_counts()\ncounts","metadata":{"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"21 - 30    37\n<=20        6\n31 - 40     4\n41 - 50     3\nName: Age, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"type(counts)","metadata":{"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"pandas.core.series.Series"},"metadata":{}}]},{"cell_type":"code","source":"counts = counts.to_frame()\ntype(counts)","metadata":{"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"pandas.core.frame.DataFrame"},"metadata":{}}]},{"cell_type":"code","source":"counts","metadata":{"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"         Age\n21 - 30   37\n<=20       6\n31 - 40    4\n41 - 50    3","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>21 - 30</th>\n      <td>37</td>\n    </tr>\n    <tr>\n      <th>&lt;=20</th>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>31 - 40</th>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>41 - 50</th>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"counts.iloc[:,:]","metadata":{"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"         Age\n21 - 30   37\n<=20       6\n31 - 40    4\n41 - 50    3","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>21 - 30</th>\n      <td>37</td>\n    </tr>\n    <tr>\n      <th>&lt;=20</th>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>31 - 40</th>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>41 - 50</th>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"counts['%'] = (counts.iloc[:,:] / counts.loc[:, 'Age'].sum(axis = 0))*100 #agregamos una columna con el porcentaje\ncounts","metadata":{"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"         Age     %\n21 - 30   37  74.0\n<=20       6  12.0\n31 - 40    4   8.0\n41 - 50    3   6.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>21 - 30</th>\n      <td>37</td>\n      <td>74.0</td>\n    </tr>\n    <tr>\n      <th>&lt;=20</th>\n      <td>6</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>31 - 40</th>\n      <td>4</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>41 - 50</th>\n      <td>3</td>\n      <td>6.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"counts = counts.reindex(['<=20', '21 - 30', '31 - 40', '41 - 50'])\ncounts","metadata":{"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"         Age     %\n<=20       6  12.0\n21 - 30   37  74.0\n31 - 40    4   8.0\n41 - 50    3   6.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>&lt;=20</th>\n      <td>6</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>21 - 30</th>\n      <td>37</td>\n      <td>74.0</td>\n    </tr>\n    <tr>\n      <th>31 - 40</th>\n      <td>4</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>41 - 50</th>\n      <td>3</td>\n      <td>6.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"counts.reset_index(inplace = True)\ncounts","metadata":{"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"     index  Age     %\n0     <=20    6  12.0\n1  21 - 30   37  74.0\n2  31 - 40    4   8.0\n3  41 - 50    3   6.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>index</th>\n      <th>Age</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>&lt;=20</td>\n      <td>6</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>21 - 30</td>\n      <td>37</td>\n      <td>74.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>31 - 40</td>\n      <td>4</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>41 - 50</td>\n      <td>3</td>\n      <td>6.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"counts = counts.rename({'index' : 'Age_group'}, axis =1 )\ncounts","metadata":{"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"  Age_group  Age     %\n0      <=20    6  12.0\n1   21 - 30   37  74.0\n2   31 - 40    4   8.0\n3   41 - 50    3   6.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age_group</th>\n      <th>Age</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>&lt;=20</td>\n      <td>6</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>21 - 30</td>\n      <td>37</td>\n      <td>74.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>31 - 40</td>\n      <td>4</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>41 - 50</td>\n      <td>3</td>\n      <td>6.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"explode_list = [0.02, 0.04, 0.06, 0.08]\ncolor_list = ['gold', 'skyblue', 'orange', 'coral']\ncounts['Age'].plot(kind = 'pie',\n                  figsize = (15, 6),\n                   startangle = 90, # decidmos donde poner el incio del piechart\n                   shadow = True,\n                   labels = None, # nos elimina los numeros \n                   autopct = '%1.1f%%', # nos pone los porcentajes\n                   pctdistance = 1.1, #hace que lo anterior este afuera\n                   explode = explode_list,# utilizamos la lista de arriba para separar los pedazos\n                   colors = color_list,\n                  )\nplt.legend(labels = counts.Age_group, #agrega leyenda con la variable especificada\n           bbox_to_anchor = (0.95,1.0) #mueve la caja de leyenda\n          )\nplt.title('Porcentaje de respondentes de dif grupos de edades', fontsize = 17, y = 1)\nplt.show()","metadata":{"trusted":true},"execution_count":32,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1080x432 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":"x = list(counts['Age_group'])\ny = list(counts['Age'])\n\nplt.bar(x, y, color= 'darkcyan') \nplt.title('Numero de respondientes de dif grupos de edades', fontsize = 17, y = 1)\nplt.show()","metadata":{"trusted":true},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"plt.subplot(1,2,2)\n\nexplode_list = [0.02, 0.04, 0.06, 0.08]\ncolor_list = ['gold', 'skyblue', 'orange', 'coral']\ncounts['Age'].plot(kind = 'pie',\n                  figsize = (15, 6),\n                   startangle = 90, # decidmos donde poner el incio del piechart\n                   shadow = True,\n                   labels = None, # nos elimina los numeros \n                   autopct = '%1.1f%%', # nos pone los porcentajes\n                   pctdistance = 1.1, #hace que lo anterior este afuera\n                   explode = explode_list,# utilizamos la lista de arriba para separar los pedazos\n                   colors = color_list,\n                  )\nplt.legend(labels = counts.Age_group, #agrega leyenda con la variable especificada\n           bbox_to_anchor = (0.95,1.0) #mueve la caja de leyenda\n          )\nplt.title('Porcentaje de respondentes de dif grupos de edades', fontsize = 17, y = 1)\n#plt.show()\n\nplt.subplot(1,2,1)\nx = list(counts['Age_group'])\ny = list(counts['Age'])\n\nplt.bar(x, y, color= 'darkcyan') \nplt.title('Numero de respondientes de dif grupos de edades', fontsize = 17, y = 1)\n#plt.show()\n","metadata":{"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1, 'Numero de respondientes de dif grupos de edades')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1080x432 with 2 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"age_genero = df[['Age', 'Sex']]\nage_genero.head()","metadata":{"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"       Age     Sex\n0  31 - 40    Male\n1  21 - 30    Male\n2  41 - 50  Female\n3  21 - 30    Male\n4  21 - 30  Female","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Sex</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>31 - 40</td>\n      <td>Male</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>21 - 30</td>\n      <td>Male</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>41 - 50</td>\n      <td>Female</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>21 - 30</td>\n      <td>Male</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>21 - 30</td>\n      <td>Female</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"age_genero = df.groupby(['Age', 'Sex']).size()\nage_genero","metadata":{"trusted":true},"execution_count":44,"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"Age      Sex   \n21 - 30  Female    15\n         Male      22\n31 - 40  Female     2\n         Male       2\n41 - 50  Female     2\n         Male       1\n<=20     Female     3\n         Male       3\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"age_genero_pivot = pd.pivot_table(index = ['Age','Sex'],\n                                  aggfunc = len,\n                                  values = 'Availability',\n                                  data = df)\nage_genero_pivot","metadata":{"trusted":true},"execution_count":50,"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"                Availability\nAge     Sex                 \n21 - 30 Female            15\n        Male              22\n31 - 40 Female             2\n        Male               2\n41 - 50 Female             2\n        Male               1\n<=20    Female             3\n        Male               3","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>Availability</th>\n    </tr>\n    <tr>\n      <th>Age</th>\n      <th>Sex</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">21 - 30</th>\n      <th>Female</th>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">31 - 40</th>\n      <th>Female</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">41 - 50</th>\n      <th>Female</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">&lt;=20</th>\n      <th>Female</th>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"type(age_genero_pivot)","metadata":{"trusted":true},"execution_count":53,"outputs":[{"execution_count":53,"output_type":"execute_result","data":{"text/plain":"pandas.core.frame.DataFrame"},"metadata":{}}]},{"cell_type":"code","source":"type(age_genero)","metadata":{"trusted":true},"execution_count":54,"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"pandas.core.series.Series"},"metadata":{}}]},{"cell_type":"code","source":"age_genero = age_genero.to_frame()\ntype(age_genero)","metadata":{"trusted":true},"execution_count":55,"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"pandas.core.frame.DataFrame"},"metadata":{}}]},{"cell_type":"code","source":"age_gender = age_genero_pivot.rename( columns = {'Availability': 'Count'}\n                                    )\nage_gender","metadata":{"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"                Count\nAge     Sex          \n21 - 30 Female     15\n        Male       22\n31 - 40 Female      2\n        Male        2\n41 - 50 Female      2\n        Male        1\n<=20    Female      3\n        Male        3","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>Count</th>\n    </tr>\n    <tr>\n      <th>Age</th>\n      <th>Sex</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">21 - 30</th>\n      <th>Female</th>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">31 - 40</th>\n      <th>Female</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">41 - 50</th>\n      <th>Female</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">&lt;=20</th>\n      <th>Female</th>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"age_gender['%'] = (age_gender.iloc[:,0] / age_gender.iloc[:,0].sum(axis=0))*100\nage_gender","metadata":{"trusted":true},"execution_count":58,"outputs":[{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"                Count     %\nAge     Sex                \n21 - 30 Female     15  30.0\n        Male       22  44.0\n31 - 40 Female      2   4.0\n        Male        2   4.0\n41 - 50 Female      2   4.0\n        Male        1   2.0\n<=20    Female      3   6.0\n        Male        3   6.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>Count</th>\n      <th>%</th>\n    </tr>\n    <tr>\n      <th>Age</th>\n      <th>Sex</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">21 - 30</th>\n      <th>Female</th>\n      <td>15</td>\n      <td>30.0</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>22</td>\n      <td>44.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">31 - 40</th>\n      <th>Female</th>\n      <td>2</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>2</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">41 - 50</th>\n      <th>Female</th>\n      <td>2</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>1</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">&lt;=20</th>\n      <th>Female</th>\n      <td>3</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>3</td>\n      <td>6.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"sns.catplot(x = 'Age',\n            data = df,\n            kind = 'count',\n            hue = 'Sex'\n           )","metadata":{"trusted":true},"execution_count":61,"outputs":[{"execution_count":61,"output_type":"execute_result","data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7fba3f07f450>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432.125x360 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}